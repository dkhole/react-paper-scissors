{"version":3,"sources":["index.js"],"names":["Square","this","props","squareClass","playerX","playerO","className","onClick","style","color","setColor","value","React","Component","Board","i","squares","classes","id","renderSquare","Game","state","history","Array","fill","xIsNext","stepNumber","step","setState","slice","length","calculateWinner","concat","newColor","String","target","status","divStat","current","winner","count","moves","map","move","desc","key","jumpTo","handleClick","class","type","onChange","pickColor","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2OAIMA,G,+KAGF,MAA8B,aAA3BC,KAAKC,MAAMC,YACLF,KAAKC,MAAME,QAEgB,aAA3BH,KAAKC,MAAMC,YACXF,KAAKC,MAAMG,QAEX,U,+BAKP,OACE,4BAAQC,UAAWL,KAAKC,MAAMC,YAAaI,QAASN,KAAKC,MAAMK,QAASC,MAAO,CAACC,MAAOR,KAAKS,aACvFT,KAAKC,MAAMS,W,GAhBHC,IAAMC,YAsBrBC,E,2KAEWC,GAAI,IAAD,OACd,OACM,kBAACf,EAAD,CACIW,MAAOV,KAAKC,MAAMc,QAAQD,GAC1BR,QAAS,kBAAM,EAAKL,MAAMK,QAAQQ,IAClCZ,YAAaF,KAAKC,MAAMe,QAAQF,GAChCX,QAASH,KAAKC,MAAME,QACpBC,QAASJ,KAAKC,MAAMG,Y,+BAO5B,OACI,yBAAKa,GAAG,SACN,yBAAKZ,UAAU,aACVL,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,IAEvB,yBAAKb,UAAU,aACVL,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,IAEvB,yBAAKb,UAAU,aACVL,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,GAClBlB,KAAKkB,aAAa,S,GA/BjBP,IAAMC,WAsCpBO,E,kDACJ,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IACDmB,MAAQ,CACXC,QAAS,CAAC,CACRN,QAASO,MAAM,GAAGC,KAAK,QAEzBC,SAAS,EACTC,WAAY,EACZtB,QAAS,UACTC,QAAS,UACTY,QAASM,MAAM,GAAGC,KAAK,WAVR,E,mDAcZG,GACL1B,KAAK2B,SAAS,CACZF,WAAYC,EACZF,QAAUE,EAAO,IAAO,M,kCAIhBZ,GACV,IAAMO,EAAUrB,KAAKoB,MAAMC,QAAQO,MAAM,EAAG5B,KAAKoB,MAAMK,WAAa,GAE9DV,EADUM,EAAQA,EAAQQ,OAAS,GACjBd,QAAQa,QAC1BZ,EAAUhB,KAAKoB,MAAMJ,QAAQY,QAEhCE,EAAgBf,IAAYA,EAAQD,KAIpCd,KAAKoB,MAAMI,SACZR,EAAQF,GAAK,WACbC,EAAQD,GAAK,MAEbE,EAAQF,GAAK,WACbC,EAAQD,GAAK,KAGfd,KAAK2B,SAAS,CACVN,QAASA,EAAQU,OAAO,CAAC,CACvBhB,QAASA,KAEXU,WAAYJ,EAAQQ,OACpBL,SAAUxB,KAAKoB,MAAMI,QACrBR,QAASA,O,gCAILF,GACR,IAAMkB,EAAWC,OAAOnB,EAAEoB,OAAOxB,OAEd,WAAhBI,EAAEoB,OAAOjB,GACVjB,KAAK2B,SAAS,CACZxB,QAAS6B,IAGXhC,KAAK2B,SAAS,CACZvB,QAAS4B,M,+BAKL,IAoBJG,EACAC,EArBG,OACDf,EAAUrB,KAAKoB,MAAMC,QACrBgB,EAAUhB,EAAQrB,KAAKoB,MAAMK,YAC7Ba,EAASR,EAAgBO,EAAQtB,SACnCwB,EAAQ,EAINC,EAAQnB,EAAQoB,KAAI,SAACf,EAAMgB,GAC7B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBAEF,OADEH,IAEA,wBAAIK,IAAKF,GACP,4BAAQrC,UAAU,UAAUC,QAAS,kBAAM,EAAKuC,OAAOH,KAAQC,OAqBvE,OAbGL,GACDH,EAAS,WAAaG,EACtBF,EAAU,UAEM,KAAVG,GACNJ,EAAS,OACTC,EAAU,SAGVD,EAAS,iBAAmBnC,KAAKoB,MAAMI,QAAU,IAAM,KACvDY,EAAU,UAIV,yBAAK/B,UAAU,QACb,yBAAKY,GAAG,cAAR,eACA,yBAAKA,GAAImB,GAAUD,GACnB,yBAAK9B,UAAU,cACb,kBAACQ,EAAD,CACEE,QAASsB,EAAQtB,QACjBT,QAAS,SAACQ,GAAD,OAAO,EAAKgC,YAAYhC,IACjCE,QAAShB,KAAKoB,MAAMJ,QACpBb,QAASH,KAAKoB,MAAMjB,QACpBC,QAASJ,KAAKoB,MAAMhB,WAGxB,yBAAKC,UAAU,aACb,4BAAKmC,IAEP,yBAAKvB,GAAG,mBACN,yBAAK8B,MAAM,UAAX,YAA6B,2BAAOC,KAAK,QAAQ/B,GAAG,SAASP,MAAOV,KAAKoB,MAAMjB,QAAS8C,SAAU,SAAAnC,GAAM,EAAKoC,UAAUpC,OACvH,yBAAKiC,MAAM,UAAX,YAA6B,2BAAOC,KAAK,QAAQ/B,GAAG,SAASP,MAAOV,KAAKoB,MAAMhB,QAAS6C,SAAU,SAAAnC,GAAM,EAAKoC,UAAUpC,a,GAtH9GH,IAAMC,WAoIvB,SAASkB,EAAgBf,GAWvB,IAVA,IAAMoC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEArC,EAAI,EAAGA,EAAIqC,EAAMtB,OAAQf,IAAK,CAAC,IAAD,cACnBqC,EAAMrC,GADa,GAC9BsC,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIvC,EAAQqC,IAAMrC,EAAQqC,KAAOrC,EAAQsC,IAAMtC,EAAQqC,KAAOrC,EAAQuC,GACpE,OAAOvC,EAAQqC,GAGnB,OAAO,KAtBTG,IAASC,OACP,kBAACrC,EAAD,MACAsC,SAASC,eAAe,W","file":"static/js/main.cf2f6090.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Square extends React.Component {\n    \n  setColor() {\n    if(this.props.squareClass === 'square x') {\n      return this.props.playerX;\n    } \n    else if (this.props.squareClass === 'square o') {\n      return this.props.playerO;\n    } else {\n      return 'black';\n    }\n  }\n\n  render() {\n      return (\n        <button className={this.props.squareClass} onClick={this.props.onClick} style={{color: this.setColor()}}>\n            {this.props.value}\n        </button>\n      );\n    }\n  }\n  \nclass Board extends React.Component {\n\n    renderSquare(i) {\n      return (\n            <Square \n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                squareClass={this.props.classes[i]}\n                playerX={this.props.playerX}\n                playerO={this.props.playerO}\n            />\n      );\n    }\n  \n    render() {\n\n        return (\n            <div id=\"board\">\n              <div className=\"board-row\">\n                  {this.renderSquare(0)}\n                  {this.renderSquare(1)}\n                  {this.renderSquare(2)}\n              </div>\n              <div className=\"board-row\">\n                  {this.renderSquare(3)}\n                  {this.renderSquare(4)}\n                  {this.renderSquare(5)}\n              </div>\n              <div className=\"board-row\">\n                  {this.renderSquare(6)}\n                  {this.renderSquare(7)}\n                  {this.renderSquare(8)}\n              </div>\n            </div>\n        );\n    }\n  }\n  \nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      playerX: '#FF0000',\n      playerO: '#0300FF',\n      classes: Array(9).fill('square'),\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const classes = this.state.classes.slice();\n\n    if(calculateWinner(squares) || squares[i]) {\n        return;\n    }\n    \n    if(this.state.xIsNext) {\n      classes[i] = 'square x';\n      squares[i] = 'X';\n    } else {\n      classes[i] = 'square o';\n      squares[i] = 'O';\n    }\n\n    this.setState({\n        history: history.concat([{\n          squares: squares,\n        }]),\n        stepNumber: history.length,\n        xIsNext: !this.state.xIsNext,\n        classes: classes,\n    });\n  }\n\n  pickColor(i) {\n    const newColor = String(i.target.value);\n\n    if(i.target.id === 'play-x') {\n      this.setState({\n        playerX: newColor,\n      });\n    } else {\n      this.setState({\n        playerO: newColor,\n      });\n    }\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    let count = 0;\n\n    //map, callback function first two arg is current element being processed in this case object squares: squares\n    //second arg is index of current element\n    const moves = history.map((step, move) => {\n        const desc = move ?\n          'Go to move #' + move :\n          'Go to game start';\n          count++;\n        return (\n          <li key={move}>\n            <button className=\"history\" onClick={() => this.jumpTo(move)}>{desc}</button>\n          </li>\n        );\n    });\n\n    let status;\n    let divStat;\n\n    if(winner) {\n      status = 'Winner: ' + winner;\n      divStat = 'winner';\n    } \n    else if(count === 10) {\n      status = 'Draw';\n      divStat = 'draw';\n    }\n    else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      divStat = 'status';\n    }\n\n    return (\n      <div className=\"game\">\n        <div id=\"game-title\">Tic-Tac-Toe</div>\n        <div id={divStat}>{status}</div>\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            classes={this.state.classes}\n            playerX={this.state.playerX}\n            playerO={this.state.playerO}\n          />\n        </div>\n        <div className=\"game-info\">\n          <ol>{moves}</ol>\n        </div>\n        <div id=\"player-controls\">\n          <div class=\"player\">Player 1 <input type=\"color\" id=\"play-x\" value={this.state.playerX} onChange={i => {this.pickColor(i)}}></input></div>\n          <div class=\"player\">Player 2 <input type=\"color\" id=\"play-o\" value={this.state.playerO} onChange={i => {this.pickColor(i)}}></input></div>\n        </div>\n      </div>\n    );\n  }\n}\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n  function calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }"],"sourceRoot":""}